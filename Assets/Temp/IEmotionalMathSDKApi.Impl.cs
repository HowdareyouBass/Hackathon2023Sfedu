// <<This file was autogenerated by NativeLibSourceGenerator>>
// <<This file is not mean to be read by human>>
#if UNITY_IOS
#define __IOS__
#endif
using NativeLibSourceGeneratorShared;
using System;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;

using System.IO;
using System.Reflection;

namespace SignalMath
{
    public sealed class EmotionalMathSDKApi
    {
        private static string GetApplicationRoot()
        {
            return Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
        }

        private static readonly Lazy<IEmotionalMathSDKApi> _api = new Lazy<IEmotionalMathSDKApi>(() =>
        {
            var platform = Platform.Type;
            try
            {
                switch (platform)
                {
                    case NativePlatformType.WinArm:
                    case NativePlatformType.WinArm64:
                    case NativePlatformType.WinX64:
                    case NativePlatformType.WinX86:
                        Environment.SetEnvironmentVariable("PATH", $"{Path.Combine(GetApplicationRoot(), @"libs\windows")};{Environment.GetEnvironmentVariable("PATH")}"); // Not embed
                        break;
                    case NativePlatformType.LinuxArm:
                    case NativePlatformType.LinuxArm64:
                    case NativePlatformType.LinuxX64:
                    case NativePlatformType.LinuxX86:
                        Environment.SetEnvironmentVariable("PATH", $"{Path.Combine(GetApplicationRoot(), @"libs\linux")};{Environment.GetEnvironmentVariable("PATH")}"); // Not embed
                        break;
                }
            }
            catch (Exception)
            {
                // ignore for IL2CPP
            }

            switch (platform)
            {
#if !__IOS__
                case NativePlatformType.WinArm:
                    return new WinArmImpl();
                case NativePlatformType.WinArm64:
                    return new WinArm64Impl();
                case NativePlatformType.WinX64:
                    return new WinX64Impl();
                case NativePlatformType.WinX86:
                    return new WinX86Impl();
                case NativePlatformType.AndroidARMv7:
                    return new AndroidARMv7Impl();
                case NativePlatformType.AndroidARMv8:
                    return new AndroidARMv8Impl();
                case NativePlatformType.AndroidX86:
                    return new AndroidX86Impl();
                case NativePlatformType.AndroidX64:
                    return new AndroidX64Impl();
                case NativePlatformType.OSX:
                    return new OSXImpl();
                case NativePlatformType.LinuxX64:
                    return new LinuxX64Impl();
                case NativePlatformType.LinuxX86:
                    return new LinuxX86Impl();
#endif
                case NativePlatformType.iOS:
#if __IOS__
                    return new iOSImpl();
#else
                    return new DefaultImpl();
#endif
            }
            throw new NotSupportedException($"[OSDescription]:[{RuntimeInformation.OSDescription}]");
        });
        private EmotionalMathSDKApi() { }
        public static IEmotionalMathSDKApi Inst
        {
            get => _api.Value;
        }
    }

    public class DefaultImpl : IEmotionalMathSDKApi
    {

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createMathLib")]
        private static extern IntPtr n_createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult);
        public IntPtr createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult)
        {
            return DefaultImpl.n_createMathLib(lib_setting, art_setting, short_art_setting, mental_spectral_setting, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeMathLib")]
        private static extern byte n_freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return DefaultImpl.n_freeMathLib(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetMentalEstimationMode")]
        private static extern byte n_MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult);
        public byte MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibSetMentalEstimationMode(mathLibPtr, independent, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHanningWinSpect")]
        private static extern byte n_MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibSetHanningWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHammingWinSpect")]
        private static extern byte n_MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibSetHammingWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetCallibrationLength")]
        private static extern byte n_MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult);
        public byte MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibSetCallibrationLength(mathLibPtr, s, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSkipWinsAfterArtifact")]
        private static extern byte n_MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult);
        public byte MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibSetSkipWinsAfterArtifact(mathLibPtr, nwins, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushData")]
        private static extern byte n_MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibPushData(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushDataArr")]
        private static extern byte n_MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibPushDataArr(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessWindow")]
        private static extern byte n_MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibProcessWindow(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessData")]
        private static extern byte n_MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibProcessData(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessDataArr")]
        private static extern byte n_MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibProcessDataArr(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetPrioritySide")]
        private static extern byte n_MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibSetPrioritySide(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibStartCalibration")]
        private static extern byte n_MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibStartCalibration(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibCalibrationFinished")]
        private static extern byte n_MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibCalibrationFinished(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedWin")]
        private static extern byte n_MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibIsArtifactedWin(mathLibPtr, side, print_info, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedSequence")]
        private static extern byte n_MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibIsArtifactedSequence(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsBothSidesArtifacted")]
        private static extern byte n_MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibIsBothSidesArtifacted(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArrSize")]
        private static extern byte n_MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibReadMentalDataArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArr")]
        private static extern byte n_MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibReadMentalDataArr(mathLibPtr, mindd, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadAverageMentalData")]
        private static extern byte n_MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult);
        public byte MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibReadAverageMentalData(mathLibPtr, n_lastwins_toaverage, ref minddatavals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArrSize")]
        private static extern byte n_MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibReadSpectralDataPercentsArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArr")]
        private static extern byte n_MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibReadSpectralDataPercentsArr(mathLibPtr, spectraldata_arr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadRawSpectralVals")]
        private static extern byte n_MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult);
        public byte MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibReadRawSpectralVals(mathLibPtr, ref raw_spectral_vals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetZeroSpectWaves")]
        private static extern byte n_MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult);
        public byte MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibSetZeroSpectWaves(mathLibPtr, active, delta, theta, alpha, beta, gamma, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetWeightsForSpectra")]
        private static extern byte n_MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult);
        public byte MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibSetWeightsForSpectra(mathLibPtr, delta_c, theta_c, alpha_c, beta_c, gamma_c, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByBandsWidth")]
        private static extern byte n_MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibSetSpectNormalizationByBandsWidth(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByCoeffs")]
        private static extern byte n_MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibSetSpectNormalizationByCoeffs(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibGetCallibrationPercents")]
        private static extern byte n_MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult);
        public byte MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult)
        {
            return DefaultImpl.n_MathLibGetCallibrationPercents(mathLibPtr, ref outPercents, ref opResult);
        }

    }
    public class WinX86Impl : IEmotionalMathSDKApi
    {

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createMathLib")]
        private static extern IntPtr n_createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult);
        public IntPtr createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult)
        {
            return WinX86Impl.n_createMathLib(lib_setting, art_setting, short_art_setting, mental_spectral_setting, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeMathLib")]
        private static extern byte n_freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinX86Impl.n_freeMathLib(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetMentalEstimationMode")]
        private static extern byte n_MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult);
        public byte MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibSetMentalEstimationMode(mathLibPtr, independent, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHanningWinSpect")]
        private static extern byte n_MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibSetHanningWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHammingWinSpect")]
        private static extern byte n_MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibSetHammingWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetCallibrationLength")]
        private static extern byte n_MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult);
        public byte MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibSetCallibrationLength(mathLibPtr, s, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSkipWinsAfterArtifact")]
        private static extern byte n_MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult);
        public byte MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibSetSkipWinsAfterArtifact(mathLibPtr, nwins, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushData")]
        private static extern byte n_MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibPushData(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushDataArr")]
        private static extern byte n_MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibPushDataArr(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessWindow")]
        private static extern byte n_MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibProcessWindow(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessData")]
        private static extern byte n_MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibProcessData(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessDataArr")]
        private static extern byte n_MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibProcessDataArr(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetPrioritySide")]
        private static extern byte n_MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibSetPrioritySide(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibStartCalibration")]
        private static extern byte n_MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibStartCalibration(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibCalibrationFinished")]
        private static extern byte n_MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibCalibrationFinished(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedWin")]
        private static extern byte n_MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibIsArtifactedWin(mathLibPtr, side, print_info, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedSequence")]
        private static extern byte n_MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibIsArtifactedSequence(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsBothSidesArtifacted")]
        private static extern byte n_MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibIsBothSidesArtifacted(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArrSize")]
        private static extern byte n_MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibReadMentalDataArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArr")]
        private static extern byte n_MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibReadMentalDataArr(mathLibPtr, mindd, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadAverageMentalData")]
        private static extern byte n_MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult);
        public byte MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibReadAverageMentalData(mathLibPtr, n_lastwins_toaverage, ref minddatavals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArrSize")]
        private static extern byte n_MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibReadSpectralDataPercentsArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArr")]
        private static extern byte n_MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibReadSpectralDataPercentsArr(mathLibPtr, spectraldata_arr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadRawSpectralVals")]
        private static extern byte n_MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult);
        public byte MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibReadRawSpectralVals(mathLibPtr, ref raw_spectral_vals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetZeroSpectWaves")]
        private static extern byte n_MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult);
        public byte MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibSetZeroSpectWaves(mathLibPtr, active, delta, theta, alpha, beta, gamma, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetWeightsForSpectra")]
        private static extern byte n_MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult);
        public byte MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibSetWeightsForSpectra(mathLibPtr, delta_c, theta_c, alpha_c, beta_c, gamma_c, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByBandsWidth")]
        private static extern byte n_MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibSetSpectNormalizationByBandsWidth(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByCoeffs")]
        private static extern byte n_MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibSetSpectNormalizationByCoeffs(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibGetCallibrationPercents")]
        private static extern byte n_MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult);
        public byte MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult)
        {
            return WinX86Impl.n_MathLibGetCallibrationPercents(mathLibPtr, ref outPercents, ref opResult);
        }

    }
    public class WinX64Impl : IEmotionalMathSDKApi
    {

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createMathLib")]
        private static extern IntPtr n_createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult);
        public IntPtr createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult)
        {
            return WinX64Impl.n_createMathLib(lib_setting, art_setting, short_art_setting, mental_spectral_setting, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeMathLib")]
        private static extern byte n_freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinX64Impl.n_freeMathLib(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetMentalEstimationMode")]
        private static extern byte n_MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult);
        public byte MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibSetMentalEstimationMode(mathLibPtr, independent, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHanningWinSpect")]
        private static extern byte n_MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibSetHanningWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHammingWinSpect")]
        private static extern byte n_MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibSetHammingWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetCallibrationLength")]
        private static extern byte n_MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult);
        public byte MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibSetCallibrationLength(mathLibPtr, s, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSkipWinsAfterArtifact")]
        private static extern byte n_MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult);
        public byte MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibSetSkipWinsAfterArtifact(mathLibPtr, nwins, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushData")]
        private static extern byte n_MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibPushData(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushDataArr")]
        private static extern byte n_MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibPushDataArr(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessWindow")]
        private static extern byte n_MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibProcessWindow(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessData")]
        private static extern byte n_MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibProcessData(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessDataArr")]
        private static extern byte n_MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibProcessDataArr(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetPrioritySide")]
        private static extern byte n_MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibSetPrioritySide(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibStartCalibration")]
        private static extern byte n_MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibStartCalibration(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibCalibrationFinished")]
        private static extern byte n_MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibCalibrationFinished(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedWin")]
        private static extern byte n_MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibIsArtifactedWin(mathLibPtr, side, print_info, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedSequence")]
        private static extern byte n_MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibIsArtifactedSequence(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsBothSidesArtifacted")]
        private static extern byte n_MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibIsBothSidesArtifacted(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArrSize")]
        private static extern byte n_MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibReadMentalDataArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArr")]
        private static extern byte n_MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibReadMentalDataArr(mathLibPtr, mindd, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadAverageMentalData")]
        private static extern byte n_MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult);
        public byte MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibReadAverageMentalData(mathLibPtr, n_lastwins_toaverage, ref minddatavals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArrSize")]
        private static extern byte n_MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibReadSpectralDataPercentsArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArr")]
        private static extern byte n_MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibReadSpectralDataPercentsArr(mathLibPtr, spectraldata_arr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadRawSpectralVals")]
        private static extern byte n_MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult);
        public byte MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibReadRawSpectralVals(mathLibPtr, ref raw_spectral_vals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetZeroSpectWaves")]
        private static extern byte n_MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult);
        public byte MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibSetZeroSpectWaves(mathLibPtr, active, delta, theta, alpha, beta, gamma, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetWeightsForSpectra")]
        private static extern byte n_MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult);
        public byte MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibSetWeightsForSpectra(mathLibPtr, delta_c, theta_c, alpha_c, beta_c, gamma_c, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByBandsWidth")]
        private static extern byte n_MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibSetSpectNormalizationByBandsWidth(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByCoeffs")]
        private static extern byte n_MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibSetSpectNormalizationByCoeffs(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibGetCallibrationPercents")]
        private static extern byte n_MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult);
        public byte MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult)
        {
            return WinX64Impl.n_MathLibGetCallibrationPercents(mathLibPtr, ref outPercents, ref opResult);
        }

    }
    public class WinArmImpl : IEmotionalMathSDKApi
    {

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createMathLib")]
        private static extern IntPtr n_createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult);
        public IntPtr createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult)
        {
            return WinArmImpl.n_createMathLib(lib_setting, art_setting, short_art_setting, mental_spectral_setting, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeMathLib")]
        private static extern byte n_freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinArmImpl.n_freeMathLib(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetMentalEstimationMode")]
        private static extern byte n_MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult);
        public byte MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibSetMentalEstimationMode(mathLibPtr, independent, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHanningWinSpect")]
        private static extern byte n_MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibSetHanningWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHammingWinSpect")]
        private static extern byte n_MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibSetHammingWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetCallibrationLength")]
        private static extern byte n_MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult);
        public byte MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibSetCallibrationLength(mathLibPtr, s, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSkipWinsAfterArtifact")]
        private static extern byte n_MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult);
        public byte MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibSetSkipWinsAfterArtifact(mathLibPtr, nwins, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushData")]
        private static extern byte n_MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibPushData(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushDataArr")]
        private static extern byte n_MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibPushDataArr(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessWindow")]
        private static extern byte n_MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibProcessWindow(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessData")]
        private static extern byte n_MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibProcessData(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessDataArr")]
        private static extern byte n_MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibProcessDataArr(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetPrioritySide")]
        private static extern byte n_MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibSetPrioritySide(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibStartCalibration")]
        private static extern byte n_MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibStartCalibration(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibCalibrationFinished")]
        private static extern byte n_MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibCalibrationFinished(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedWin")]
        private static extern byte n_MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibIsArtifactedWin(mathLibPtr, side, print_info, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedSequence")]
        private static extern byte n_MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibIsArtifactedSequence(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsBothSidesArtifacted")]
        private static extern byte n_MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibIsBothSidesArtifacted(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArrSize")]
        private static extern byte n_MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibReadMentalDataArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArr")]
        private static extern byte n_MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibReadMentalDataArr(mathLibPtr, mindd, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadAverageMentalData")]
        private static extern byte n_MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult);
        public byte MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibReadAverageMentalData(mathLibPtr, n_lastwins_toaverage, ref minddatavals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArrSize")]
        private static extern byte n_MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibReadSpectralDataPercentsArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArr")]
        private static extern byte n_MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibReadSpectralDataPercentsArr(mathLibPtr, spectraldata_arr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadRawSpectralVals")]
        private static extern byte n_MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult);
        public byte MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibReadRawSpectralVals(mathLibPtr, ref raw_spectral_vals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetZeroSpectWaves")]
        private static extern byte n_MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult);
        public byte MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibSetZeroSpectWaves(mathLibPtr, active, delta, theta, alpha, beta, gamma, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetWeightsForSpectra")]
        private static extern byte n_MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult);
        public byte MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibSetWeightsForSpectra(mathLibPtr, delta_c, theta_c, alpha_c, beta_c, gamma_c, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByBandsWidth")]
        private static extern byte n_MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibSetSpectNormalizationByBandsWidth(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByCoeffs")]
        private static extern byte n_MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibSetSpectNormalizationByCoeffs(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibGetCallibrationPercents")]
        private static extern byte n_MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult);
        public byte MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult)
        {
            return WinArmImpl.n_MathLibGetCallibrationPercents(mathLibPtr, ref outPercents, ref opResult);
        }

    }
    public class WinArm64Impl : IEmotionalMathSDKApi
    {

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createMathLib")]
        private static extern IntPtr n_createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult);
        public IntPtr createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult)
        {
            return WinArm64Impl.n_createMathLib(lib_setting, art_setting, short_art_setting, mental_spectral_setting, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeMathLib")]
        private static extern byte n_freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinArm64Impl.n_freeMathLib(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetMentalEstimationMode")]
        private static extern byte n_MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult);
        public byte MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibSetMentalEstimationMode(mathLibPtr, independent, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHanningWinSpect")]
        private static extern byte n_MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibSetHanningWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHammingWinSpect")]
        private static extern byte n_MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibSetHammingWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetCallibrationLength")]
        private static extern byte n_MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult);
        public byte MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibSetCallibrationLength(mathLibPtr, s, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSkipWinsAfterArtifact")]
        private static extern byte n_MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult);
        public byte MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibSetSkipWinsAfterArtifact(mathLibPtr, nwins, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushData")]
        private static extern byte n_MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibPushData(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushDataArr")]
        private static extern byte n_MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibPushDataArr(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessWindow")]
        private static extern byte n_MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibProcessWindow(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessData")]
        private static extern byte n_MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibProcessData(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessDataArr")]
        private static extern byte n_MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibProcessDataArr(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetPrioritySide")]
        private static extern byte n_MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibSetPrioritySide(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibStartCalibration")]
        private static extern byte n_MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibStartCalibration(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibCalibrationFinished")]
        private static extern byte n_MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibCalibrationFinished(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedWin")]
        private static extern byte n_MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibIsArtifactedWin(mathLibPtr, side, print_info, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedSequence")]
        private static extern byte n_MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibIsArtifactedSequence(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsBothSidesArtifacted")]
        private static extern byte n_MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibIsBothSidesArtifacted(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArrSize")]
        private static extern byte n_MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibReadMentalDataArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArr")]
        private static extern byte n_MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibReadMentalDataArr(mathLibPtr, mindd, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadAverageMentalData")]
        private static extern byte n_MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult);
        public byte MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibReadAverageMentalData(mathLibPtr, n_lastwins_toaverage, ref minddatavals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArrSize")]
        private static extern byte n_MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibReadSpectralDataPercentsArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArr")]
        private static extern byte n_MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibReadSpectralDataPercentsArr(mathLibPtr, spectraldata_arr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadRawSpectralVals")]
        private static extern byte n_MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult);
        public byte MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibReadRawSpectralVals(mathLibPtr, ref raw_spectral_vals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetZeroSpectWaves")]
        private static extern byte n_MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult);
        public byte MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibSetZeroSpectWaves(mathLibPtr, active, delta, theta, alpha, beta, gamma, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetWeightsForSpectra")]
        private static extern byte n_MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult);
        public byte MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibSetWeightsForSpectra(mathLibPtr, delta_c, theta_c, alpha_c, beta_c, gamma_c, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByBandsWidth")]
        private static extern byte n_MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibSetSpectNormalizationByBandsWidth(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByCoeffs")]
        private static extern byte n_MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibSetSpectNormalizationByCoeffs(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibGetCallibrationPercents")]
        private static extern byte n_MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult);
        public byte MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult)
        {
            return WinArm64Impl.n_MathLibGetCallibrationPercents(mathLibPtr, ref outPercents, ref opResult);
        }

    }
    public class iOSImpl : IEmotionalMathSDKApi
    {

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createMathLib")]
        private static extern IntPtr n_createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult);
        public IntPtr createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult)
        {
            return iOSImpl.n_createMathLib(lib_setting, art_setting, short_art_setting, mental_spectral_setting, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeMathLib")]
        private static extern byte n_freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return iOSImpl.n_freeMathLib(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetMentalEstimationMode")]
        private static extern byte n_MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult);
        public byte MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibSetMentalEstimationMode(mathLibPtr, independent, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHanningWinSpect")]
        private static extern byte n_MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibSetHanningWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHammingWinSpect")]
        private static extern byte n_MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibSetHammingWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetCallibrationLength")]
        private static extern byte n_MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult);
        public byte MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibSetCallibrationLength(mathLibPtr, s, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSkipWinsAfterArtifact")]
        private static extern byte n_MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult);
        public byte MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibSetSkipWinsAfterArtifact(mathLibPtr, nwins, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushData")]
        private static extern byte n_MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibPushData(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushDataArr")]
        private static extern byte n_MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibPushDataArr(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessWindow")]
        private static extern byte n_MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibProcessWindow(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessData")]
        private static extern byte n_MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibProcessData(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessDataArr")]
        private static extern byte n_MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibProcessDataArr(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetPrioritySide")]
        private static extern byte n_MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibSetPrioritySide(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibStartCalibration")]
        private static extern byte n_MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibStartCalibration(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibCalibrationFinished")]
        private static extern byte n_MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibCalibrationFinished(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedWin")]
        private static extern byte n_MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibIsArtifactedWin(mathLibPtr, side, print_info, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedSequence")]
        private static extern byte n_MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibIsArtifactedSequence(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsBothSidesArtifacted")]
        private static extern byte n_MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibIsBothSidesArtifacted(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArrSize")]
        private static extern byte n_MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibReadMentalDataArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArr")]
        private static extern byte n_MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibReadMentalDataArr(mathLibPtr, mindd, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadAverageMentalData")]
        private static extern byte n_MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult);
        public byte MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibReadAverageMentalData(mathLibPtr, n_lastwins_toaverage, ref minddatavals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArrSize")]
        private static extern byte n_MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibReadSpectralDataPercentsArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArr")]
        private static extern byte n_MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibReadSpectralDataPercentsArr(mathLibPtr, spectraldata_arr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadRawSpectralVals")]
        private static extern byte n_MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult);
        public byte MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibReadRawSpectralVals(mathLibPtr, ref raw_spectral_vals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetZeroSpectWaves")]
        private static extern byte n_MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult);
        public byte MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibSetZeroSpectWaves(mathLibPtr, active, delta, theta, alpha, beta, gamma, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetWeightsForSpectra")]
        private static extern byte n_MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult);
        public byte MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibSetWeightsForSpectra(mathLibPtr, delta_c, theta_c, alpha_c, beta_c, gamma_c, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByBandsWidth")]
        private static extern byte n_MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibSetSpectNormalizationByBandsWidth(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByCoeffs")]
        private static extern byte n_MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibSetSpectNormalizationByCoeffs(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibGetCallibrationPercents")]
        private static extern byte n_MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult);
        public byte MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult)
        {
            return iOSImpl.n_MathLibGetCallibrationPercents(mathLibPtr, ref outPercents, ref opResult);
        }

    }
    public class AndroidARMv7Impl : IEmotionalMathSDKApi
    {
        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createMathLib")]
        private static extern IntPtr n_createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult);
        public IntPtr createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult)
        {
            return n_createMathLib(lib_setting, art_setting, short_art_setting, mental_spectral_setting, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeMathLib")]
        private static extern byte n_freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_freeMathLib(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetMentalEstimationMode")]
        private static extern byte n_MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult);
        public byte MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibSetMentalEstimationMode(mathLibPtr, independent, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHanningWinSpect")]
        private static extern byte n_MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibSetHanningWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHammingWinSpect")]
        private static extern byte n_MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibSetHammingWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetCallibrationLength")]
        private static extern byte n_MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult);
        public byte MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibSetCallibrationLength(mathLibPtr, s, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSkipWinsAfterArtifact")]
        private static extern byte n_MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult);
        public byte MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibSetSkipWinsAfterArtifact(mathLibPtr, nwins, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushData")]
        private static extern byte n_MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibPushData(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushDataArr")]
        private static extern byte n_MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibPushDataArr(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessWindow")]
        private static extern byte n_MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibProcessWindow(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessData")]
        private static extern byte n_MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibProcessData(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessDataArr")]
        private static extern byte n_MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibProcessDataArr(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetPrioritySide")]
        private static extern byte n_MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibSetPrioritySide(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibStartCalibration")]
        private static extern byte n_MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibStartCalibration(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibCalibrationFinished")]
        private static extern byte n_MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibCalibrationFinished(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedWin")]
        private static extern byte n_MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibIsArtifactedWin(mathLibPtr, side, print_info, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedSequence")]
        private static extern byte n_MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibIsArtifactedSequence(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsBothSidesArtifacted")]
        private static extern byte n_MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibIsBothSidesArtifacted(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArrSize")]
        private static extern byte n_MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibReadMentalDataArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArr")]
        private static extern byte n_MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibReadMentalDataArr(mathLibPtr, mindd, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadAverageMentalData")]
        private static extern byte n_MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult);
        public byte MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibReadAverageMentalData(mathLibPtr, n_lastwins_toaverage, ref minddatavals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArrSize")]
        private static extern byte n_MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibReadSpectralDataPercentsArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArr")]
        private static extern byte n_MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibReadSpectralDataPercentsArr(mathLibPtr, spectraldata_arr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadRawSpectralVals")]
        private static extern byte n_MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult);
        public byte MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibReadRawSpectralVals(mathLibPtr, ref raw_spectral_vals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetZeroSpectWaves")]
        private static extern byte n_MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult);
        public byte MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibSetZeroSpectWaves(mathLibPtr, active, delta, theta, alpha, beta, gamma, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetWeightsForSpectra")]
        private static extern byte n_MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult);
        public byte MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibSetWeightsForSpectra(mathLibPtr, delta_c, theta_c, alpha_c, beta_c, gamma_c, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByBandsWidth")]
        private static extern byte n_MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibSetSpectNormalizationByBandsWidth(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByCoeffs")]
        private static extern byte n_MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibSetSpectNormalizationByCoeffs(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibGetCallibrationPercents")]
        private static extern byte n_MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult);
        public byte MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult)
        {
            return AndroidARMv7Impl.n_MathLibGetCallibrationPercents(mathLibPtr, ref outPercents, ref opResult);
        }

    }
    public class AndroidARMv8Impl : IEmotionalMathSDKApi
    {
        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createMathLib")]
        private static extern IntPtr n_createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult);
        public IntPtr createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult)
        {
            return n_createMathLib(lib_setting, art_setting, short_art_setting, mental_spectral_setting, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeMathLib")]
        private static extern byte n_freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_freeMathLib(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetMentalEstimationMode")]
        private static extern byte n_MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult);
        public byte MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibSetMentalEstimationMode(mathLibPtr, independent, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHanningWinSpect")]
        private static extern byte n_MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibSetHanningWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHammingWinSpect")]
        private static extern byte n_MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibSetHammingWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetCallibrationLength")]
        private static extern byte n_MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult);
        public byte MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibSetCallibrationLength(mathLibPtr, s, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSkipWinsAfterArtifact")]
        private static extern byte n_MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult);
        public byte MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibSetSkipWinsAfterArtifact(mathLibPtr, nwins, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushData")]
        private static extern byte n_MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibPushData(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushDataArr")]
        private static extern byte n_MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibPushDataArr(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessWindow")]
        private static extern byte n_MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibProcessWindow(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessData")]
        private static extern byte n_MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibProcessData(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessDataArr")]
        private static extern byte n_MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibProcessDataArr(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetPrioritySide")]
        private static extern byte n_MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibSetPrioritySide(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibStartCalibration")]
        private static extern byte n_MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibStartCalibration(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibCalibrationFinished")]
        private static extern byte n_MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibCalibrationFinished(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedWin")]
        private static extern byte n_MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibIsArtifactedWin(mathLibPtr, side, print_info, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedSequence")]
        private static extern byte n_MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibIsArtifactedSequence(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsBothSidesArtifacted")]
        private static extern byte n_MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibIsBothSidesArtifacted(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArrSize")]
        private static extern byte n_MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibReadMentalDataArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArr")]
        private static extern byte n_MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibReadMentalDataArr(mathLibPtr, mindd, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadAverageMentalData")]
        private static extern byte n_MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult);
        public byte MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibReadAverageMentalData(mathLibPtr, n_lastwins_toaverage, ref minddatavals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArrSize")]
        private static extern byte n_MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibReadSpectralDataPercentsArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArr")]
        private static extern byte n_MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibReadSpectralDataPercentsArr(mathLibPtr, spectraldata_arr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadRawSpectralVals")]
        private static extern byte n_MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult);
        public byte MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibReadRawSpectralVals(mathLibPtr, ref raw_spectral_vals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetZeroSpectWaves")]
        private static extern byte n_MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult);
        public byte MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibSetZeroSpectWaves(mathLibPtr, active, delta, theta, alpha, beta, gamma, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetWeightsForSpectra")]
        private static extern byte n_MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult);
        public byte MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibSetWeightsForSpectra(mathLibPtr, delta_c, theta_c, alpha_c, beta_c, gamma_c, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByBandsWidth")]
        private static extern byte n_MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibSetSpectNormalizationByBandsWidth(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByCoeffs")]
        private static extern byte n_MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibSetSpectNormalizationByCoeffs(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibGetCallibrationPercents")]
        private static extern byte n_MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult);
        public byte MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult)
        {
            return AndroidARMv8Impl.n_MathLibGetCallibrationPercents(mathLibPtr, ref outPercents, ref opResult);
        }

    }
    public class AndroidX86Impl : IEmotionalMathSDKApi
    {
        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createMathLib")]
        private static extern IntPtr n_createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult);
        public IntPtr createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult)
        {
            return n_createMathLib(lib_setting, art_setting, short_art_setting, mental_spectral_setting, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeMathLib")]
        private static extern byte n_freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_freeMathLib(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetMentalEstimationMode")]
        private static extern byte n_MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult);
        public byte MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibSetMentalEstimationMode(mathLibPtr, independent, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHanningWinSpect")]
        private static extern byte n_MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibSetHanningWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHammingWinSpect")]
        private static extern byte n_MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibSetHammingWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetCallibrationLength")]
        private static extern byte n_MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult);
        public byte MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibSetCallibrationLength(mathLibPtr, s, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSkipWinsAfterArtifact")]
        private static extern byte n_MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult);
        public byte MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibSetSkipWinsAfterArtifact(mathLibPtr, nwins, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushData")]
        private static extern byte n_MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibPushData(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushDataArr")]
        private static extern byte n_MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibPushDataArr(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessWindow")]
        private static extern byte n_MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibProcessWindow(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessData")]
        private static extern byte n_MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibProcessData(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessDataArr")]
        private static extern byte n_MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibProcessDataArr(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetPrioritySide")]
        private static extern byte n_MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibSetPrioritySide(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibStartCalibration")]
        private static extern byte n_MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibStartCalibration(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibCalibrationFinished")]
        private static extern byte n_MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibCalibrationFinished(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedWin")]
        private static extern byte n_MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibIsArtifactedWin(mathLibPtr, side, print_info, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedSequence")]
        private static extern byte n_MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibIsArtifactedSequence(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsBothSidesArtifacted")]
        private static extern byte n_MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibIsBothSidesArtifacted(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArrSize")]
        private static extern byte n_MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibReadMentalDataArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArr")]
        private static extern byte n_MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibReadMentalDataArr(mathLibPtr, mindd, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadAverageMentalData")]
        private static extern byte n_MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult);
        public byte MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibReadAverageMentalData(mathLibPtr, n_lastwins_toaverage, ref minddatavals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArrSize")]
        private static extern byte n_MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibReadSpectralDataPercentsArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArr")]
        private static extern byte n_MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibReadSpectralDataPercentsArr(mathLibPtr, spectraldata_arr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadRawSpectralVals")]
        private static extern byte n_MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult);
        public byte MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibReadRawSpectralVals(mathLibPtr, ref raw_spectral_vals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetZeroSpectWaves")]
        private static extern byte n_MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult);
        public byte MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibSetZeroSpectWaves(mathLibPtr, active, delta, theta, alpha, beta, gamma, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetWeightsForSpectra")]
        private static extern byte n_MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult);
        public byte MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibSetWeightsForSpectra(mathLibPtr, delta_c, theta_c, alpha_c, beta_c, gamma_c, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByBandsWidth")]
        private static extern byte n_MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibSetSpectNormalizationByBandsWidth(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByCoeffs")]
        private static extern byte n_MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibSetSpectNormalizationByCoeffs(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibGetCallibrationPercents")]
        private static extern byte n_MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult);
        public byte MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult)
        {
            return AndroidX86Impl.n_MathLibGetCallibrationPercents(mathLibPtr, ref outPercents, ref opResult);
        }

    }
    public class AndroidX64Impl : IEmotionalMathSDKApi
    {
        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createMathLib")]
        private static extern IntPtr n_createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult);
        public IntPtr createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult)
        {
            return n_createMathLib(lib_setting, art_setting, short_art_setting, mental_spectral_setting, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeMathLib")]
        private static extern byte n_freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_freeMathLib(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetMentalEstimationMode")]
        private static extern byte n_MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult);
        public byte MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibSetMentalEstimationMode(mathLibPtr, independent, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHanningWinSpect")]
        private static extern byte n_MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibSetHanningWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHammingWinSpect")]
        private static extern byte n_MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibSetHammingWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetCallibrationLength")]
        private static extern byte n_MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult);
        public byte MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibSetCallibrationLength(mathLibPtr, s, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSkipWinsAfterArtifact")]
        private static extern byte n_MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult);
        public byte MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibSetSkipWinsAfterArtifact(mathLibPtr, nwins, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushData")]
        private static extern byte n_MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibPushData(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushDataArr")]
        private static extern byte n_MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibPushDataArr(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessWindow")]
        private static extern byte n_MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibProcessWindow(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessData")]
        private static extern byte n_MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibProcessData(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessDataArr")]
        private static extern byte n_MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibProcessDataArr(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetPrioritySide")]
        private static extern byte n_MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibSetPrioritySide(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibStartCalibration")]
        private static extern byte n_MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibStartCalibration(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibCalibrationFinished")]
        private static extern byte n_MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibCalibrationFinished(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedWin")]
        private static extern byte n_MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibIsArtifactedWin(mathLibPtr, side, print_info, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedSequence")]
        private static extern byte n_MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibIsArtifactedSequence(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsBothSidesArtifacted")]
        private static extern byte n_MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibIsBothSidesArtifacted(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArrSize")]
        private static extern byte n_MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibReadMentalDataArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArr")]
        private static extern byte n_MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibReadMentalDataArr(mathLibPtr, mindd, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadAverageMentalData")]
        private static extern byte n_MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult);
        public byte MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibReadAverageMentalData(mathLibPtr, n_lastwins_toaverage, ref minddatavals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArrSize")]
        private static extern byte n_MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibReadSpectralDataPercentsArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArr")]
        private static extern byte n_MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibReadSpectralDataPercentsArr(mathLibPtr, spectraldata_arr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadRawSpectralVals")]
        private static extern byte n_MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult);
        public byte MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibReadRawSpectralVals(mathLibPtr, ref raw_spectral_vals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetZeroSpectWaves")]
        private static extern byte n_MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult);
        public byte MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibSetZeroSpectWaves(mathLibPtr, active, delta, theta, alpha, beta, gamma, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetWeightsForSpectra")]
        private static extern byte n_MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult);
        public byte MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibSetWeightsForSpectra(mathLibPtr, delta_c, theta_c, alpha_c, beta_c, gamma_c, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByBandsWidth")]
        private static extern byte n_MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibSetSpectNormalizationByBandsWidth(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByCoeffs")]
        private static extern byte n_MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibSetSpectNormalizationByCoeffs(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibGetCallibrationPercents")]
        private static extern byte n_MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult);
        public byte MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult)
        {
            return AndroidX64Impl.n_MathLibGetCallibrationPercents(mathLibPtr, ref outPercents, ref opResult);
        }

    }
    public class OSXImpl : IEmotionalMathSDKApi
    {

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createMathLib")]
        private static extern IntPtr n_createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult);
        public IntPtr createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult)
        {
            return OSXImpl.n_createMathLib(lib_setting, art_setting, short_art_setting, mental_spectral_setting, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeMathLib")]
        private static extern byte n_freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return OSXImpl.n_freeMathLib(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetMentalEstimationMode")]
        private static extern byte n_MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult);
        public byte MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibSetMentalEstimationMode(mathLibPtr, independent, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHanningWinSpect")]
        private static extern byte n_MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibSetHanningWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHammingWinSpect")]
        private static extern byte n_MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibSetHammingWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetCallibrationLength")]
        private static extern byte n_MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult);
        public byte MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibSetCallibrationLength(mathLibPtr, s, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSkipWinsAfterArtifact")]
        private static extern byte n_MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult);
        public byte MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibSetSkipWinsAfterArtifact(mathLibPtr, nwins, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushData")]
        private static extern byte n_MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibPushData(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushDataArr")]
        private static extern byte n_MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibPushDataArr(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessWindow")]
        private static extern byte n_MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibProcessWindow(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessData")]
        private static extern byte n_MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibProcessData(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessDataArr")]
        private static extern byte n_MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibProcessDataArr(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetPrioritySide")]
        private static extern byte n_MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibSetPrioritySide(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibStartCalibration")]
        private static extern byte n_MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibStartCalibration(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibCalibrationFinished")]
        private static extern byte n_MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibCalibrationFinished(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedWin")]
        private static extern byte n_MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibIsArtifactedWin(mathLibPtr, side, print_info, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedSequence")]
        private static extern byte n_MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibIsArtifactedSequence(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsBothSidesArtifacted")]
        private static extern byte n_MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibIsBothSidesArtifacted(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArrSize")]
        private static extern byte n_MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibReadMentalDataArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArr")]
        private static extern byte n_MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibReadMentalDataArr(mathLibPtr, mindd, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadAverageMentalData")]
        private static extern byte n_MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult);
        public byte MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibReadAverageMentalData(mathLibPtr, n_lastwins_toaverage, ref minddatavals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArrSize")]
        private static extern byte n_MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibReadSpectralDataPercentsArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArr")]
        private static extern byte n_MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibReadSpectralDataPercentsArr(mathLibPtr, spectraldata_arr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadRawSpectralVals")]
        private static extern byte n_MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult);
        public byte MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibReadRawSpectralVals(mathLibPtr, ref raw_spectral_vals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetZeroSpectWaves")]
        private static extern byte n_MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult);
        public byte MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibSetZeroSpectWaves(mathLibPtr, active, delta, theta, alpha, beta, gamma, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetWeightsForSpectra")]
        private static extern byte n_MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult);
        public byte MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibSetWeightsForSpectra(mathLibPtr, delta_c, theta_c, alpha_c, beta_c, gamma_c, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByBandsWidth")]
        private static extern byte n_MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibSetSpectNormalizationByBandsWidth(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByCoeffs")]
        private static extern byte n_MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibSetSpectNormalizationByCoeffs(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibGetCallibrationPercents")]
        private static extern byte n_MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult);
        public byte MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult)
        {
            return OSXImpl.n_MathLibGetCallibrationPercents(mathLibPtr, ref outPercents, ref opResult);
        }

    }
    public class LinuxX64Impl : IEmotionalMathSDKApi
    {

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createMathLib")]
        private static extern IntPtr n_createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult);
        public IntPtr createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_createMathLib(lib_setting, art_setting, short_art_setting, mental_spectral_setting, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeMathLib")]
        private static extern byte n_freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_freeMathLib(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetMentalEstimationMode")]
        private static extern byte n_MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult);
        public byte MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibSetMentalEstimationMode(mathLibPtr, independent, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHanningWinSpect")]
        private static extern byte n_MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibSetHanningWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHammingWinSpect")]
        private static extern byte n_MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibSetHammingWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetCallibrationLength")]
        private static extern byte n_MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult);
        public byte MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibSetCallibrationLength(mathLibPtr, s, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSkipWinsAfterArtifact")]
        private static extern byte n_MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult);
        public byte MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibSetSkipWinsAfterArtifact(mathLibPtr, nwins, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushData")]
        private static extern byte n_MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibPushData(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushDataArr")]
        private static extern byte n_MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibPushDataArr(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessWindow")]
        private static extern byte n_MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibProcessWindow(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessData")]
        private static extern byte n_MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibProcessData(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessDataArr")]
        private static extern byte n_MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibProcessDataArr(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetPrioritySide")]
        private static extern byte n_MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibSetPrioritySide(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibStartCalibration")]
        private static extern byte n_MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibStartCalibration(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibCalibrationFinished")]
        private static extern byte n_MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibCalibrationFinished(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedWin")]
        private static extern byte n_MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibIsArtifactedWin(mathLibPtr, side, print_info, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedSequence")]
        private static extern byte n_MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibIsArtifactedSequence(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsBothSidesArtifacted")]
        private static extern byte n_MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibIsBothSidesArtifacted(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArrSize")]
        private static extern byte n_MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibReadMentalDataArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArr")]
        private static extern byte n_MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibReadMentalDataArr(mathLibPtr, mindd, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadAverageMentalData")]
        private static extern byte n_MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult);
        public byte MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibReadAverageMentalData(mathLibPtr, n_lastwins_toaverage, ref minddatavals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArrSize")]
        private static extern byte n_MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibReadSpectralDataPercentsArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArr")]
        private static extern byte n_MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibReadSpectralDataPercentsArr(mathLibPtr, spectraldata_arr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadRawSpectralVals")]
        private static extern byte n_MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult);
        public byte MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibReadRawSpectralVals(mathLibPtr, ref raw_spectral_vals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetZeroSpectWaves")]
        private static extern byte n_MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult);
        public byte MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibSetZeroSpectWaves(mathLibPtr, active, delta, theta, alpha, beta, gamma, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetWeightsForSpectra")]
        private static extern byte n_MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult);
        public byte MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibSetWeightsForSpectra(mathLibPtr, delta_c, theta_c, alpha_c, beta_c, gamma_c, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByBandsWidth")]
        private static extern byte n_MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibSetSpectNormalizationByBandsWidth(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByCoeffs")]
        private static extern byte n_MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibSetSpectNormalizationByCoeffs(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibGetCallibrationPercents")]
        private static extern byte n_MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult);
        public byte MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult)
        {
            return LinuxX64Impl.n_MathLibGetCallibrationPercents(mathLibPtr, ref outPercents, ref opResult);
        }

    }
    public class LinuxX86Impl : IEmotionalMathSDKApi
    {

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createMathLib")]
        private static extern IntPtr n_createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult);
        public IntPtr createMathLib(MathLibSetting lib_setting, ArtifactDetectSetting art_setting, ShortArtifactDetectSetting short_art_setting, MentalAndSpectralSetting mental_spectral_setting, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_createMathLib(lib_setting, art_setting, short_art_setting, mental_spectral_setting, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeMathLib")]
        private static extern byte n_freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte freeMathLib(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_freeMathLib(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetMentalEstimationMode")]
        private static extern byte n_MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult);
        public byte MathLibSetMentalEstimationMode(IntPtr mathLibPtr, bool independent, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibSetMentalEstimationMode(mathLibPtr, independent, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHanningWinSpect")]
        private static extern byte n_MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHanningWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibSetHanningWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetHammingWinSpect")]
        private static extern byte n_MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibSetHammingWinSpect(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibSetHammingWinSpect(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetCallibrationLength")]
        private static extern byte n_MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult);
        public byte MathLibSetCallibrationLength(IntPtr mathLibPtr, int s, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibSetCallibrationLength(mathLibPtr, s, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSkipWinsAfterArtifact")]
        private static extern byte n_MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult);
        public byte MathLibSetSkipWinsAfterArtifact(IntPtr mathLibPtr, int nwins, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibSetSkipWinsAfterArtifact(mathLibPtr, nwins, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushData")]
        private static extern byte n_MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushData(IntPtr mathLibPtr, [In] RawChannels[] samples, int samplesCount, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibPushData(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibPushDataArr")]
        private static extern byte n_MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult);
        public byte MathLibPushDataArr(IntPtr mathLibPtr, [In, Out][MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(RawChannelsArrayMarshaller))] RawChannelsArray[] samples, int samplesCount, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibPushDataArr(mathLibPtr, samples, samplesCount, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessWindow")]
        private static extern byte n_MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessWindow(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibProcessWindow(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessData")]
        private static extern byte n_MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibProcessData(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibProcessData(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibProcessDataArr")]
        private static extern byte n_MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibProcessDataArr(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibProcessDataArr(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetPrioritySide")]
        private static extern byte n_MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult);
        public byte MathLibSetPrioritySide(IntPtr mathLibPtr, SideType side, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibSetPrioritySide(mathLibPtr, side, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibStartCalibration")]
        private static extern byte n_MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult);
        public byte MathLibStartCalibration(IntPtr mathLibPtr, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibStartCalibration(mathLibPtr, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibCalibrationFinished")]
        private static extern byte n_MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibCalibrationFinished(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibCalibrationFinished(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedWin")]
        private static extern byte n_MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedWin(IntPtr mathLibPtr, SideType side, bool print_info, ref bool result, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibIsArtifactedWin(mathLibPtr, side, print_info, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsArtifactedSequence")]
        private static extern byte n_MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsArtifactedSequence(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibIsArtifactedSequence(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibIsBothSidesArtifacted")]
        private static extern byte n_MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult);
        public byte MathLibIsBothSidesArtifacted(IntPtr mathLibPtr, ref bool result, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibIsBothSidesArtifacted(mathLibPtr, ref result, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArrSize")]
        private static extern byte n_MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibReadMentalDataArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadMentalDataArr")]
        private static extern byte n_MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadMentalDataArr(IntPtr mathLibPtr, [In, Out] MindData[] mindd, ref int arr_size, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibReadMentalDataArr(mathLibPtr, mindd, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadAverageMentalData")]
        private static extern byte n_MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult);
        public byte MathLibReadAverageMentalData(IntPtr mathLibPtr, int n_lastwins_toaverage, ref MindData minddatavals, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibReadAverageMentalData(mathLibPtr, n_lastwins_toaverage, ref minddatavals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArrSize")]
        private static extern byte n_MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArrSize(IntPtr mathLibPtr, ref int arr_size, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibReadSpectralDataPercentsArrSize(mathLibPtr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadSpectralDataPercentsArr")]
        private static extern byte n_MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult);
        public byte MathLibReadSpectralDataPercentsArr(IntPtr mathLibPtr, [In, Out] SpectralDataPercents[] spectraldata_arr, ref int arr_size, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibReadSpectralDataPercentsArr(mathLibPtr, spectraldata_arr, ref arr_size, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibReadRawSpectralVals")]
        private static extern byte n_MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult);
        public byte MathLibReadRawSpectralVals(IntPtr mathLibPtr, ref RawSpectVals raw_spectral_vals, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibReadRawSpectralVals(mathLibPtr, ref raw_spectral_vals, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetZeroSpectWaves")]
        private static extern byte n_MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult);
        public byte MathLibSetZeroSpectWaves(IntPtr mathLibPtr, bool active, int delta, int theta, int alpha, int beta, int gamma, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibSetZeroSpectWaves(mathLibPtr, active, delta, theta, alpha, beta, gamma, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetWeightsForSpectra")]
        private static extern byte n_MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult);
        public byte MathLibSetWeightsForSpectra(IntPtr mathLibPtr, double delta_c, double theta_c, double alpha_c, double beta_c, double gamma_c, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibSetWeightsForSpectra(mathLibPtr, delta_c, theta_c, alpha_c, beta_c, gamma_c, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByBandsWidth")]
        private static extern byte n_MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByBandsWidth(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibSetSpectNormalizationByBandsWidth(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibSetSpectNormalizationByCoeffs")]
        private static extern byte n_MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult);
        public byte MathLibSetSpectNormalizationByCoeffs(IntPtr mathLibPtr, bool fl, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibSetSpectNormalizationByCoeffs(mathLibPtr, fl, ref opResult);
        }

        [DllImport(EmStLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "MathLibGetCallibrationPercents")]
        private static extern byte n_MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult);
        public byte MathLibGetCallibrationPercents(IntPtr mathLibPtr, ref int outPercents, ref OpStatus opResult)
        {
            return LinuxX86Impl.n_MathLibGetCallibrationPercents(mathLibPtr, ref outPercents, ref opResult);
        }

    }
}